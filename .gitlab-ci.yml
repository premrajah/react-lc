#cache:
#  untracked: true
#  key: "$CI_BUILD_REF_NAME"
#  paths:
#  - vendor/

stages:
- dev_build
- dev_deploy
- stage_build
- stage_deploy
- prod_build
- prod_deploy

variables:
#  CI_DEBUG_TRACE: "true"
  CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}_${CI_BUILD_REF}
  CONTAINER_IMAGE_LATEST: ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest
  DOCKER_DRIVER: overlay2


build_dev:
  stage: dev_build
  image: docker:git
  services:
    - docker:dind
  before_script:
    - echo $GCR_ACCOUNT > /tmp/$CI_PIPELINE_ID.json
    - cat /tmp/$CI_PIPELINE_ID.json | docker login -u _json_key --password-stdin https://${GCR_DOMAIN}
  after_script:
    - rm /tmp/$CI_PIPELINE_ID.json
  script:
    - export ENVIRONMENT=${CI_COMMIT_REF_NAME//_}
    - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./.env
    - export APP_NAME=loopcycyle/${CI_PROJECT_NAME}
    - export IMAGE_TAG=${GCR_DOMAIN}/${GCP_PROJECT_ID}/${APP_NAME}:${CI_COMMIT_REF_NAME}.${CI_PIPELINE_IID}
    - docker build -t ${APP_NAME} .
    - docker tag ${APP_NAME} ${IMAGE_TAG}
    - docker push ${IMAGE_TAG}
    - echo ${IMAGE_TAG} | tee image_tag.txt
  artifacts:
    paths:
      - image_tag.txt
  only:
    - develop
    - develop_refactor
    - develop-api2


deploy_dev:
  stage: dev_deploy
  image: kiwigrid/gcloud-kubectl-helm
  # <<: *deploy_precursor
  script:
#  - apk add --update -t curl
  - export ENVIRONMENT=${CI_COMMIT_REF_NAME//_}
  - echo $GKE_ACCOUNT > /tmp/$CI_PIPELINE_DEPLOY.json
  - gcloud auth activate-service-account --key-file=/tmp/$CI_PIPELINE_DEPLOY.json
  - gcloud config set project ${GCP_PROJECT_ID}
  - gcloud config set container/cluster ${GKE_CLUSTER}
  - gcloud config set compute/zone ${GKE_ZONE}
  - gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE}
  - export IMAGE_TAG=$(cat image_tag.txt)
  - echo $IMAGE_TAG

  - sed -i.bak "s#\\\${API_IMAGE}#$IMAGE_TAG#" ./scripts/k8s/deployment.yaml
  - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./scripts/k8s/deployment.yaml
  - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./scripts/k8s/gcp_service.yaml
  - cat ./scripts/k8s/deployment.yaml
#  - kubectl delete -f ./scripts/k8s/deployment.yaml
  - kubectl apply -f ./scripts/k8s/deployment.yaml
  - kubectl apply -f ./scripts/k8s/gcp_service.yaml
  only:
    - develop
    - develop_refactor
    - develop-api2

build_prod:
  stage: prod_build
  image: docker:git
  services:
    - docker:dind
  before_script:
    - echo $GCR_ACCOUNT > /tmp/$CI_PIPELINE_ID.json
    - cat /tmp/$CI_PIPELINE_ID.json | docker login -u _json_key --password-stdin https://${GCR_DOMAIN}
  after_script:
    - rm /tmp/$CI_PIPELINE_ID.json
  script:
    - export ENVIRONMENT=${CI_COMMIT_REF_NAME//_}
    - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./.env
    - export APP_NAME=loopcycyle/${CI_PROJECT_NAME}
    - export IMAGE_TAG=${GCR_DOMAIN}/${GCP_PROJECT_ID}/${APP_NAME}:${CI_COMMIT_REF_NAME}.${CI_PIPELINE_IID}
    - docker build -t ${APP_NAME} .
    - docker tag ${APP_NAME} ${IMAGE_TAG}
    - docker push ${IMAGE_TAG}
    - echo ${IMAGE_TAG} | tee image_tag.txt
  artifacts:
    paths:
      - image_tag.txt
  only:
    - master

deploy_prod:
  stage: prod_deploy
  image: kiwigrid/gcloud-kubectl-helm
  # <<: *deploy_precursor
  script:
    #  - apk add --update -t curl
    - export ENVIRONMENT=${CI_COMMIT_REF_NAME//_}
    - echo $GKE_ACCOUNT > /tmp/$CI_PIPELINE_DEPLOY.json
    - gcloud auth activate-service-account --key-file=/tmp/$CI_PIPELINE_DEPLOY.json
    - gcloud config set project ${GCP_PROJECT_ID}
    - gcloud config set container/cluster ${GKE_CLUSTER}
    - gcloud config set compute/zone ${GKE_ZONE}
    - gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE}
    - export IMAGE_TAG=$(cat image_tag.txt)
    - echo $IMAGE_TAG

    - sed -i.bak "s#\\\${API_IMAGE}#$IMAGE_TAG#" ./scripts/k8s/deployment.yaml
    - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./scripts/k8s/deployment.yaml
    - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./scripts/k8s/gcp_service.yaml
    - cat ./scripts/k8s/deployment.yaml
    #  - kubectl delete -f ./scripts/k8s/deployment.yaml
    - kubectl apply -f ./scripts/k8s/deployment.yaml
    - kubectl apply -f ./scripts/k8s/gcp_service.yaml
  only:
    - master
  when: manual

build_stage:
  stage: stage_build
  image: docker:git
  services:
    - docker:dind
  before_script:
    - echo $GCR_ACCOUNT > /tmp/$CI_PIPELINE_ID.json
    - cat /tmp/$CI_PIPELINE_ID.json | docker login -u _json_key --password-stdin https://${GCR_DOMAIN}
  after_script:
    - rm /tmp/$CI_PIPELINE_ID.json
  script:
    - export ENVIRONMENT=${CI_COMMIT_REF_NAME//_}
    - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./.env
    - export APP_NAME=loopcycyle/${CI_PROJECT_NAME}
    - export IMAGE_TAG=${GCR_DOMAIN}/${GCP_PROJECT_ID}/${APP_NAME}:${CI_COMMIT_REF_NAME}.${CI_PIPELINE_IID}
    - docker build -t ${APP_NAME} .
    - docker tag ${APP_NAME} ${IMAGE_TAG}
    - docker push ${IMAGE_TAG}
    - echo ${IMAGE_TAG} | tee image_tag.txt
  artifacts:
    paths:
      - image_tag.txt
  only:
    - master

deploy_stage:
  stage: stage_deploy
  image: kiwigrid/gcloud-kubectl-helm
  # <<: *deploy_precursor
  script:
    #  - apk add --update -t curl
    - export ENVIRONMENT=stage
    - echo $GKE_ACCOUNT > /tmp/$CI_PIPELINE_DEPLOY.json
    - gcloud auth activate-service-account --key-file=/tmp/$CI_PIPELINE_DEPLOY.json
    - gcloud config set project ${GCP_PROJECT_ID}
    - gcloud config set container/cluster ${GKE_CLUSTER}
    - gcloud config set compute/zone ${GKE_ZONE}
    - gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE}
    - export IMAGE_TAG=$(cat image_tag.txt)
    - echo $IMAGE_TAG

    - sed -i.bak "s#\\\${API_IMAGE}#$IMAGE_TAG#" ./scripts/k8s/deployment.yaml
    - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./scripts/k8s/deployment.yaml
    - sed -i.bak "s#\\\${ENVIRONMENT}#$ENVIRONMENT#" ./scripts/k8s/gcp_service.yaml
    - cat ./scripts/k8s/deployment.yaml
    #  - kubectl delete -f ./scripts/k8s/deployment.yaml
    - kubectl apply -f ./scripts/k8s/deployment.yaml
    - kubectl apply -f ./scripts/k8s/gcp_service.yaml
  only:
    - master


